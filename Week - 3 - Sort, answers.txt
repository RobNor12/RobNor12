sort1 uses: bubblesort
sort1 took 0.559s on sorted50000.txt
sort1 took 5.150s on reversed50000.txt
sort1 took 5.884s on random50000.txt

How do you know?: Bubblesort has a high performance when used for numbers that are in a sorted order but tends to take longer for randomized data

sort2 uses: mergesort
sort2 took 0.502s on sorted50000.txt
sort3 took 0.700s on reversed50000.txt
sort3 took 0.664s on random50000.txt

How do you know?: had the fastest times among all of the sorts even with randomized data and reversed data

sort3 uses: selection sort
sort3 took 2.356s on sorted50000.txt
sort3 took 2.650s on reversed50000.txt
sort3 took 2.391s on randomd50000.txt

How do you know?: had consistant times, each time it sorted the data

cs50/problems/2025/x/sort
:) answers.txt exists
Log
checking that answers.txt exists...
:) answers all questions
:) correctly identifies each sort
Log
checking that sorts are classified correctly...
